Kind is a programming language similar to Agda. Examples:

{{kind_examples}}

In Kind, global definitions start with an uppercase letter and can include
periods. So, for example, 'Equal.apply' and 'Nat.add.comm.succ' are both global
definitions, but 'app' and 'emp' are local definitions. This includes types, so,
for example, 'Equal' and 'Nat' are global definitions. Below is a JSON with all
the global definitions used on 'List.head':

["List.head", "List", "Maybe", "List.nil", "List.cons", "Maybe.none", "Maybe.some"]

Notes:
global functions aren't curried. passing them needs lambdas: '(x => Nat.succ x)'
holes are written as '?hole_name'
{{note}}

Below is an incorrect Kind program:

// Main.kind
{{code}}

Below is the error message. The problematic location is surrounded with {{}}:

{{error}}
